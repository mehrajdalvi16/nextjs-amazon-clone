/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Prodcut, // @ts-ignore
  Category, // @ts-ignore
  Order, // @ts-ignore
  Review,
} from "@prisma/client";

export class ProdcutServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ProdcutCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProdcutCountArgs>
  ): Promise<number> {
    return this.prisma.prodcut.count(args);
  }

  async prodcuts<T extends Prisma.ProdcutFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProdcutFindManyArgs>
  ): Promise<Prodcut[]> {
    return this.prisma.prodcut.findMany(args);
  }
  async prodcut<T extends Prisma.ProdcutFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProdcutFindUniqueArgs>
  ): Promise<Prodcut | null> {
    return this.prisma.prodcut.findUnique(args);
  }
  async createProdcut<T extends Prisma.ProdcutCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProdcutCreateArgs>
  ): Promise<Prodcut> {
    return this.prisma.prodcut.create<T>(args);
  }
  async updateProdcut<T extends Prisma.ProdcutUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProdcutUpdateArgs>
  ): Promise<Prodcut> {
    return this.prisma.prodcut.update<T>(args);
  }
  async deleteProdcut<T extends Prisma.ProdcutDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProdcutDeleteArgs>
  ): Promise<Prodcut> {
    return this.prisma.prodcut.delete(args);
  }

  async getCategory(parentId: string): Promise<Category | null> {
    return this.prisma.prodcut
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getOrder(parentId: string): Promise<Order | null> {
    return this.prisma.prodcut
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }

  async getReview(parentId: string): Promise<Review | null> {
    return this.prisma.prodcut
      .findUnique({
        where: { id: parentId },
      })
      .review();
  }
}
