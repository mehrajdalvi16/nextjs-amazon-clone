/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Prodcut } from "./Prodcut";
import { ProdcutCountArgs } from "./ProdcutCountArgs";
import { ProdcutFindManyArgs } from "./ProdcutFindManyArgs";
import { ProdcutFindUniqueArgs } from "./ProdcutFindUniqueArgs";
import { CreateProdcutArgs } from "./CreateProdcutArgs";
import { UpdateProdcutArgs } from "./UpdateProdcutArgs";
import { DeleteProdcutArgs } from "./DeleteProdcutArgs";
import { Category } from "../../category/base/Category";
import { Order } from "../../order/base/Order";
import { Review } from "../../review/base/Review";
import { ProdcutService } from "../prodcut.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Prodcut)
export class ProdcutResolverBase {
  constructor(
    protected readonly service: ProdcutService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Prodcut",
    action: "read",
    possession: "any",
  })
  async _prodcutsMeta(
    @graphql.Args() args: ProdcutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Prodcut])
  @nestAccessControl.UseRoles({
    resource: "Prodcut",
    action: "read",
    possession: "any",
  })
  async prodcuts(
    @graphql.Args() args: ProdcutFindManyArgs
  ): Promise<Prodcut[]> {
    return this.service.prodcuts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Prodcut, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Prodcut",
    action: "read",
    possession: "own",
  })
  async prodcut(
    @graphql.Args() args: ProdcutFindUniqueArgs
  ): Promise<Prodcut | null> {
    const result = await this.service.prodcut(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prodcut)
  @nestAccessControl.UseRoles({
    resource: "Prodcut",
    action: "create",
    possession: "any",
  })
  async createProdcut(
    @graphql.Args() args: CreateProdcutArgs
  ): Promise<Prodcut> {
    return await this.service.createProdcut({
      ...args,
      data: {
        ...args.data,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,

        review: args.data.review
          ? {
              connect: args.data.review,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prodcut)
  @nestAccessControl.UseRoles({
    resource: "Prodcut",
    action: "update",
    possession: "any",
  })
  async updateProdcut(
    @graphql.Args() args: UpdateProdcutArgs
  ): Promise<Prodcut | null> {
    try {
      return await this.service.updateProdcut({
        ...args,
        data: {
          ...args.data,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,

          review: args.data.review
            ? {
                connect: args.data.review,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Prodcut)
  @nestAccessControl.UseRoles({
    resource: "Prodcut",
    action: "delete",
    possession: "any",
  })
  async deleteProdcut(
    @graphql.Args() args: DeleteProdcutArgs
  ): Promise<Prodcut | null> {
    try {
      return await this.service.deleteProdcut(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async getCategory(
    @graphql.Parent() parent: Prodcut
  ): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async getOrder(@graphql.Parent() parent: Prodcut): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Review, {
    nullable: true,
    name: "review",
  })
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async getReview(@graphql.Parent() parent: Prodcut): Promise<Review | null> {
    const result = await this.service.getReview(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
